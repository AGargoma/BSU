#include <bits/stdc++.h>
#include <thread>
using std::vector;
using std::cout;
using std::ref;

std::mutex write_mutex;
bool output = false;
void print(const vector<vector<int>> &A) {
  for (int i = 0; i < A.size(); ++i) {
    for (int j = 0; j < A[0].size(); ++j) {
      cout << std::setw(5) << std::left << A[i][j] << ' ';
    }
    cout << std::endl;
  }
}
void first(const vector<vector<int>> &A, const vector<vector<int>> &B,
           int n, int m, int l) {
  cout << "first:\n";
  auto start = std::chrono::high_resolution_clock::now();
  vector<vector<int>> C(n, vector<int>(l, 0));
  for (int i = 0; i < n; ++i) {
    for (int p = 0; p < l; ++p) {
      for (int j = 0; j < m; ++j) {
        C[i][p] += A[i][j] * B[j][p];
      }
    }
  }
  auto end = std::chrono::high_resolution_clock::now();
  auto elapsed_seconds = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
  cout << "time(microseconds): " << elapsed_seconds.count() << std::endl;
  if(output) print(C);
}

void second(const vector<vector<int>> &A, const vector<vector<int>> &B, int n, int m, int l, int k) {
  cout << "second:\n";
  auto start = std::chrono::high_resolution_clock::now();
  vector<vector<int>> C(n, vector<int>(l));
  vector<std::thread> threads;
  auto multiply_by_blocks2 = [&](int row_number, int column_number) {
    int rows_in_block = (n / k) <= 1 ? 1 : (n / k);
    int columns_in_block = (l / k) <= 1 ? 1 : (l / k);
    int n1, n2;
    int l1, l2;
    if (row_number >= k - 1 || row_number >= n - 1) {
      n1 = row_number * rows_in_block;
      n2 = n;

    } else {
      n1 = row_number * rows_in_block;
      n2 = (row_number + 1) * rows_in_block;
    }
    if (column_number >= k - 1 || column_number >= l - 1) {
      l1 = column_number * columns_in_block;
      l2 = l;
    } else {
      l1 = column_number * columns_in_block;
      l2 = (column_number + 1) * columns_in_block;
    }
    for (int i = n1; i < n2; ++i) {
      for (int p = l1; p < l2; ++p) {
        for (int j = 0; j < m; ++j) {
          C[i][p] += A[i][j] * B[j][p];
        }
      }
    }
  };

  for (int i = 0; i < k; ++i) {
    threads.clear();
    threads.reserve(k);
    for (int j = 0; j < k; ++j) {
      threads.emplace_back(multiply_by_blocks2, i, j);
    }
    for (int i = 0; i < k; ++i) {
      threads[i].join();
    }
  }

  auto end = std::chrono::high_resolution_clock::now();
  auto elapsed_seconds = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
  cout << "time(microseconds): " << elapsed_seconds.count() << std::endl;
  if(output) print(C);
}

void third(const vector<vector<int>> &A, const vector<vector<int>> &B, int n, int m, int l, int k) {
  cout << "third:\n";
  auto start = std::chrono::high_resolution_clock::now();
  vector<vector<int>> C(n, vector<int>(l));
  vector<std::thread> threads;
  auto multiply_by_blocks3 = [&](int number) {
    int columns_in_block = (m / k) <= 1 ? 1 : (m / k);
    int m1, m2;
    if (number >= k - 1 || number >= m - 1) {
      m1 = number * columns_in_block;
      m2 = m;
    } else {
      m1 = number * columns_in_block;
      m2 = (number + 1) * columns_in_block;
    }
    for (int i = 0; i < n; ++i) {
      for (int p = 0; p < l; ++p) {
        for (int j = m1; j < m2; ++j) {
          C[i][p] += A[i][j] * B[j][p];
        }
      }
    }
  };
  for (int i = 0; i < k; ++i) {
    threads.emplace_back(multiply_by_blocks3, i);
  }
  for (int i = 0; i < k; ++i) {
    threads[i].join();
  }
  auto end = std::chrono::high_resolution_clock::now();
  auto elapsed_seconds = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
  cout << "time(microseconds): " << elapsed_seconds.count() << std::endl;
  if(output) print(C);
}

void fourth(const vector<vector<int>> &A, const vector<vector<int>> &B, int n, int m, int l, int k) {
  cout << "fourth:\n";
  auto start = std::chrono::high_resolution_clock::now();
  vector<vector<int>> C(n, vector<int>(l));
  vector<std::thread> threads;
  auto multiply_by_blocks4 = [&](int i, int p, int j) {
    int rows_in_block = (n / k) <= 1 ? 1 : (n / k);
    int columns_in_block1 = (m / k) <= 1 ? 1 : (m / k);
    int columns_in_block2 = (l / k) <= 1 ? 1 : (l / k);
    int n1, n2;
    int m1, m2;
    int l1, l2;
    if (i >= k - 1 || i >= n - 1) {
      n1 = i * rows_in_block;
      n2 = n;
    } else {
      n1 = i * rows_in_block;
      n2 = (i + 1) * rows_in_block;
    }
    if (p >= k - 1 || p >= m - 1) {
      m1 = p * columns_in_block1;
      m2 = m;
    } else {
      m1 = p * columns_in_block1;
      m2 = (p + 1) * columns_in_block1;
    }
    if (j >= k - 1 || j >= l - 1) {
      l1 = j * columns_in_block2;
      l2 = l;
    } else {
      l1 = j * columns_in_block2;
      l2 = (j + 1) * columns_in_block2;
    }
    for (int i = n1; i < n2; ++i) {
      for (int j = l1; j < l2; ++j) {
        for (int p = m1; p < m2; ++p) {
          C[i][j] += A[i][p] * B[p][j];
        }
      }
    }
  };

  for (int i = 0; i < k; ++i) {
    for (int p = 0; p < k; ++p) {
      threads.clear();
      threads.reserve(k);
      for (int j = 0; j < k; ++j) {
        threads.emplace_back(multiply_by_blocks4, i, p, j);
      }
      for (int y = 0; y < k; ++y) {
        threads[y].join();
      }
    }
  }
  auto end = std::chrono::high_resolution_clock::now();
  auto elapsed_seconds = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
  cout << "time(microseconds): " << elapsed_seconds.count() << std::endl;
  if(output) print(C);
}

int main() {
  std::ifstream input("input.txt");
  int k, n, m, l;
  input >> k >> n >> m;
  std::vector<std::vector<int>> A(n, std::vector<int>(m));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      input >> A[i][j];
    }
  }
  input >> l;
  std::vector<std::vector<int>> B(m, std::vector<int>(l));
  for (int i = 0; i < m; ++i) {
    for (int j = 0; j < l; ++j) {
      input >> B[i][j];
    }
  }
  first(A, B, n, m, l);
  second(A, B, n, m, l, k);
  third(A, B, n, m, l, k);
  fourth(A, B, n, m, l, k);
}
/*
3
6 6
4 5 1 6 9 1
0 3 5 13 5 1
19 3 3 1 5 1
-3 2 1 1 0 1
0 3 1 8 2 1
1 1 1 1 5 1
6
4 5 1 6 9 1
1 1 1 1 5 1
5 1 8 9 10 1
0 3 5 13 5 1
19 3 3 1 5 1
19 3 3 1 0 1



 4
6 48
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
6
4 5 1 6 9 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
1 1 1 1 5 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
5 1 8 9 10 1
0 3 5 13 5 1
19 3 3 1 5 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1
19 3 3 1 0 1

 8
48 48
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
48
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1 4 5 1 6 9 1
0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1 0 3 5 13 5 1
19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1 19 3 3 1 5 1
-3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1 -3 2 1 1 0 1
0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1 0 3 1 8 2 1
1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1 1 1 5 1
 */